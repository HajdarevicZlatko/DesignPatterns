%% ############ Instructions ####################
%%
%% This template is created for "Khulna University 
%% Studies (KU Studies)" journal. This needs to be compiled in 
%% "LuaLatex" environment. In OVERLEAF, to set the 
%% "LuaLatex", press the "Menu" button on top-left and 
%% set the option "compiler" to "LuaLatex".
%% This is due to the dependency of Garamond font.
%%
%% Developed by:
%% Atanu Shome
%% Computer Science & Engineering Discipline,
%% Khulna University
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


\documentclass[12pt,a4paper]{article}
\usepackage[margin=1in]{geometry}
\usepackage{graphicx}
\usepackage{amsmath}
\usepackage{tabularx,booktabs}
\usepackage{caption}
\usepackage{wrapfig}
\usepackage[english]{babel}
\usepackage[style=apa, backend=biber]{biblatex}
\usepackage{xcolor}
\usepackage{fontspec}
\usepackage{CormorantGaramond}
\usepackage[hidelinks]{hyperref}
\usepackage{enumitem}

\newlist{SubItemList}{itemize}{1}
\setlist[SubItemList]{label={$-$}}

\let\OldItem\item
\newcommand{\SubItemStart}[1]{%
    \let\item\SubItemEnd
    \begin{SubItemList}[resume]%
        \OldItem #1%
}
\newcommand{\SubItemMiddle}[1]{%
    \OldItem #1%
}
\newcommand{\SubItemEnd}[1]{%
    \end{SubItemList}%
    \let\item\OldItem
    \item #1%
}
\newcommand*{\SubItem}[1]{%
    \let\SubItem\SubItemMiddle%
    \SubItemStart{#1}%
}%



%% Set Journal Name on each page
\usepackage{fancyhdr}
\pagestyle{fancy}
\fancyhf{}
\renewcommand{\headrulewidth}{0pt}
\lhead{\textit{\small Naziv predmeta}}
\fancyfoot[C]{\thepage}
%% *************** KUS Title **********************
\usepackage{titlesec}
\titleformat*{\section}{\fontsize{13}{01}\bfseries}
\titleformat*{\subsection}{\fontsize{12}{01}\bfseries}
\title{% added <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
\centering\normalsize  
\vspace{-0.7in}
\colorbox{black}{\parbox{\linewidth}{\textcolor{white}{\hfill\KUS \hfill}}} \\[0.5ex]
\begin{minipage}{\dimexpr0.5\linewidth-0.5\wlogo}\oriart\end{minipage}%
\begin{minipage}{\dimexpr0.5\linewidth+0.5\wlogo-6pt}\LOGO \end{minipage}\\[0.5ex]
\colorbox{black}{\parbox{\linewidth}{\textcolor{white}{\hfill\KUni\hfill}}}\\[1ex]
\titleofArt
}
\newlength{\wlogo}
% ******************* KUS Title Formatting END *****

% ************** DATA to be filled by the USER <<<<<<<<<<<<<<<<<<<<
\author{Hajdarevic Zlatko 2021440065}
\date{} 
\newcommand{\KUS}{\normalsize\bfseries\itshape Univerzitet Singidunum}
\newcommand{\KUni}{\normalsize\bfseries\itshape }
\newcommand{\oriart}{\normalsize\bfseries SEMINARSKI RAD}
\setlength{\wlogo}{1.15cm}
\newcommand{\LOGO}{\includegraphics[width=\wlogo]{Slike/logo.jpg}}}
\newcommand{\titleofArt}{\textbf{ \large Naziv predmeta}}
% ******************************

%% ############ Reference SOURCE File ##############
\addbibresource{ref.bib}


\begin{document}
\maketitle  
%%%%%% DO NOT TOUCH THIS %%%%%%%%%%%%%%%%%%%%%%%%%%
\fancypagestyle{Initial}{%
    %\addtolength\topmargin{-0.7in}
    \fancyhead{}
}
\thispagestyle{Initial}

\noindent
\rule{\textwidth}{0.4pt}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\tableofcontents
\hfill \break
\noindent
\rule{\textwidth}{0.4pt}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Apstrakcija}
U softverskom inženjerstvu, dizajn paterni su opšte ponovljivo rešenje za uobičajeni problem u dizajnu softvera. Dizajn patern nije gotov dizajn koji se može direktno transformisati u kod. To je opis ili šablon za rešavanje problema koji se može koristiti u mnogim različitim situacijama. Dizajn paterni mogu ubrzati proces razvoja pružanjem testiranih, dokazanih razvojnih paradigmi. Efikasan dizajn softvera zahteva razmatranje problema koji možda neće postati vidljivi tek kasnije u implementaciji. Ponovna upotreba šablona dizajna pomaže u sprečavanju suptilnih problema koji mogu da izazovu velike probleme i poboljšava čitljivost koda za programere i arhitekte koji su upoznati sa obrascima.
\hfill \break
\hfill \break
\textbf{Kljucne reci:} Dizajn paterni
\hfill \break
\noindent
\rule{\textwidth}{0.4pt}
\section{Opis i kategorizacija dizajn paterna}
\subsection{Opis}
Dizajnerski obrasci se obično definišu kao vremenski testirana rešenja za probleme dizajna koji se ponavljaju. Termin se odnosi i na opis rešenja koje možete da pročitate i na primer tog rešenja koje se koristi za rešavanje određenog problema. Sviđa mi se analogija poređenja šablona dizajna sa klasom i instancom objekta klase. Svaki od njih je drugačiji način predstavljanja stvari.Dizajnerski obrasci imaju svoje korene u radu Kristofera Aleksandra, građevinskog inženjera koji je pisao o svom iskustvu u rešavanju problema dizajna u vezi sa zgradama i gradovima. Aleksandru je palo na pamet da određene dizajnerske konstrukcije kada se koriste iznova i iznova dovode do željenog efekta. Dokumentovao je i objavio iskustvo koje je stekao kako bi drugi mogli imati koristi. Pre otprilike 15 godina, softverski profesionalci su počeli da ugrađuju Aleksandrove principe u kreiranje dokumentacije ranog dizajna kao vodiča za početnike. Zajednica obrazaca raste i u članstvu i u pokrivenosti. Literatura o obrascima opisuje nove obrasce koji rešavaju nova pitanja u vezi sa tehničkim napretkom. Da bismo koristili ove obrasce, moracemo da ih naučimo i upoznamo se sa njima kako bismo znali koji obrazac da upotrebimo kada se pojavi problem sa dizajnom. Mnogi obrasci su dokumentovani tokom godina. Različiti autori su ih klasifikovali na različite načine.
\subsection{Kategorizacija}
\subsubsection{Kreacioni paterni}
Ovi paterni se odnose na instanciranje klase. Ovaj obrazac se dalje može podeliti na obrasce kreiranja klasa i obrasce stvaranja objekata. Dok obrasci kreiranja klasa efikasno koriste nasleđivanje u procesu instanciranja, obrasci kreiranja objekata efikasno koriste delegiranje da bi obavili posao.
\begin{itemize}
    \item \textbf{Abstract Factory}\\
    Kreira instancu nekoliko porodica klasa
    \item \textbf{Builder}\\
    Odvaja konstrukciju objekta od njegovog predstavljanja
    \item \textbf{Factory Method}\\
    Kreira instancu nekoliko izvedenih klasa
    \item \textbf{Object Pool}\\
    Nacin za izbegavanje skupog instanciranja i oslobađanja resursa recikliranjem objekata koji više nisu u upotrebi
    \item \textbf{Prototip}\\
Mogucnost potpuno inicijalizovana instance da se kopira ili klonira
\item \textbf{Singleton}\\
Klasa čija samo jedna instanca može postojati
\end{itemize}

\subsubsection{Strukturalni paterni}
Ovi obrasci dizajna se odnose na kompoziciju klasa i objekata. Strukturni obrasci za kreiranje klasa koriste nasleđivanje za sastavljanje interfejsa. Strukturni objektni obrasci definišu načine sastavljanja objekata da bi se dobila nova funkcionalnost.
\begin{itemize}
\item \textbf{Adapter}\\
Adapter obrazac omogućava da inače nekompatibilne klase rade zajedno pretvaranjem interfejsa jedne klase u interfejs koji očekuju klijenti
\item \textbf{Bridge}\\
Obrazac Bridge odvaja apstrakciju od njene implementacije, tako da se ona mogu razlikovati nezavisno
\item \textbf{Composite} \\
Composite sastavlja objekte u strukture stabla i omogućava klijentima da tretiraju pojedinačne objekte i kompozicije ujednačeno
\item \textbf{Decorator}
Dinamički dodajte odgovornosti objektima
\item \textbf{Facade}\\
Jedna klasa koja predstavlja ceo podsistem
\item \textbf{Flyweight}\\
Zrnasta instanca koja se koristi za efikasno deljenje
\item \textbf{Private Class Data}\\
Ograničava pristup pristupniku/mutatoru
\item \textbf{Proxy}\\
Objekat koji predstavlja drugi objekat
\end{itemize}

\subsubsection{Paterni ponasanja}
Ovi obrasci dizajna se odnose na komunikaciju sa objektima klase. Obrasci ponašanja su oni obrasci koji se najviše bave komunikacijom između objekata.

\begin{itemize}
\item \textbf{Chain of responsibility}\\
Način prosleđivanja zahteva između lanca objekata
\item \textbf{Command}\\
Enkapsulirajte komandni zahtev kao objekat
\item \textbf{Interpreter} \\
Način uključivanja jezičkih elemenata u program
\item \textbf{Iterator}
Pristupajte sekvencijalno elementima kolekcije
\item \textbf{Mediator}\\
Definiše pojednostavljenu komunikaciju između klasa
\item \textbf{Memento}\\
Snimanje i vracanje unutrašnjeg stanje objekta
\item \textbf{Null Object}\\
Dizajniran da deluje kao podrazumevana vrednost objekta
\item \textbf{Observer}\\
Način obaveštavanja o promeni na broj klasa
\item \textbf{State}\\
Menjanje ponašanje objekta kada se njegovo stanje promeni
\item \textbf{Strategy}\\
Enkapsulira algoritam unutar klase
\item \textbf{Template method}\\
Odložite tačne korake algoritma na podklasu
\item \textbf{Visitor}\\
Definiše novu operaciju za klasu bez promene same klase
\end{itemize}


\hfill \break
\hfill \break
\hfill \break
\noindent
\rule{\textwidth}{0.4pt}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Paterni ponasanja}
\subsection{Chain of responsibility}
\subsubsection{Opis}
\subsubsection{Implementacija}
https://github.com/HajdarevicZlatko/ChainOfRensponsibily.git\\

\subsection{Mediator}
\subsubsection{Opis}
\subsubsection{Implementacija}
\subsection{Observer}
\subsubsection{Opis}
\subsubsection{Implementacija}
\subsection{State}
\subsubsection{Opis}
\subsubsection{Implementacija}
\subsection{Strategy}
\subsubsection{Opis}
\subsubsection{Implementacija}
\hfill \break
\hfill \break
\hfill \break
\noindent
\rule{\textwidth}{0.4pt}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Strukturalni paterni}
\subsection{Composite}
\subsubsection{Opis}
\subsubsection{Implementacija}
\subsection{Facade}
\subsubsection{Opis}
\subsubsection{Implementacija}
\subsection{Decorator}
\subsubsection{Opis}
\subsubsection{Implementacija}
\hfill \break
\hfill \break
\hfill \break
\noindent
\rule{\textwidth}{0.4pt}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{SOLID principi}
\subsection{S - Single-responsiblity princip}
\subsubsection{Opis}
Kao što naziv sugeriše, ovaj princip kaže da svaka klasa treba da ima jednu odgovornost, jednu jedinu svrhu. To znači da će klasa raditi samo jedan posao, što nas navodi na zaključak da bi trebalo da ima samo jedan razlog za promenu.
\subsubsection{Implementacija}
\subsection{O - Open-closed princip}
\subsubsection{Opis}
Moze da se definise na sledeci nacin: „Softverski entiteti (klase, moduli, funkcije, itd.) treba da budu otvoreni za proširenje, ali zatvoreni za modifikaciju.“ Opšta ideja ovog principa je odlična. Kaže vam da napišete svoj kod kako biste mogli da dodate novu funkcionalnost bez promene postojećeg koda.
\subsubsection{Implementacija}
\subsection{L - Liskov Substitution princip}
\subsubsection{Opis}
Princip definiše da će objekti superklase biti zamenljivi objektima njenih potklasa bez narušavanja primene.
\subsubsection{Implementacija}
\subsection{I - Interface Segregation princip}
\subsubsection{Opis}

Slično principu jedinstvene odgovornosti, cilj principa Interface Segregation je da smanji neželjene efekte i učestalost potrebnih promena tako što će softver podeliti na više nezavisnih delova.

\subsubsection{Implementacija}
\subsection{D - Dependency Inversion Principle}
\subsubsection{Opis}
\subsubsection{Implementacija}

\hfill \break
\hfill \break
\hfill \break
\noindent
\rule{\textwidth}{0.4pt}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Reference}
https://sourcemaking.com/design\_patterns#:~:text=Design\%20patterns\%20provide\%20general\%20solutions,understood\%20names\%20for\%20software\%20interactions.\\
https://www.developer.com/design/what-are-design-patterns-and-do-i-need-them/ \\
https://www.digitalocean.com/community/conceptual\_articles/s-o-l-i-d-the-first-five-principles-of-object-oriented-design\\
\printbibliography
\end{document}
 